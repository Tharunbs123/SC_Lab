import numpy as np

def objective_function(x):
    return np.sum(x**2)
def gwo(obj_func, dim, n_agents, n_iter, lb, ub):
    pos = np.random.uniform(lb, ub, (n_agents, dim))
    alpha = beta = delta = np.zeros(dim)
    scores = [np.inf, np.inf, np.inf]
    for t in range(n_iter):
        a = 2 - t * 2 / n_iter
        for i in range(n_agents):
            pos[i] = np.clip(pos[i], lb, ub)
            fit = obj_func(pos[i])
            if fit < scores[0]:
                scores = [fit, *scores[:2]]
                alpha, beta, delta = pos[i], alpha, beta
            elif fit < scores[1]:
                scores[1:] = fit, scores[1]
                beta, delta = pos[i], beta
            elif fit < scores[2]:
                scores[2] = fit
                delta = pos[i]

        A = 2 * a * np.random.rand(3, dim) - a
        C = 2 * np.random.rand(3, dim)
        X = []
        for best, a_, c_ in zip([alpha, beta, delta], A, C):
            D = abs(c_ * best - pos)
            X.append(best - a_ * D)
        pos = np.mean(X, axis=0)

        print(f"Iter {t+1} | Best: {scores[0]:.5f}")

    return alpha, scores[0]

if __name__ == "__main__":
    best_pos, best_score = gwo(objective_function, dim=5, n_agents=20, n_iter=50, lb=-10, ub=10)
    print("\nBest Position:", best_pos)
    print("Best Score:", best_score)
    import numpy as np

def obj(x): return np.sum(x**2)

def gwo(f, d, n, it, lb, ub):
    P = np.random.uniform(lb, ub, (n, d))
    A = B = D = np.zeros(d)
    S = [np.inf]*3

    for t in range(it):
        a = 2 - 2*t/it
        for i in range(n):
            P[i] = np.clip(P[i], lb, ub)
            fit = f(P[i])
            if fit < S[0]: S = [fit, *S[:2]]; A, B, D = P[i], A, B
            elif fit < S[1]: S[1:] = fit, S[1]; B, D = P[i], B
            elif fit < S[2]: S[2] = fit; D = P[i]

        r, a_, c_ = np.random.rand(3, 3, d)
        A_ = 2*a*a_ - a
        C_ = 2*c_
        P = np.mean([W - A_[i]*abs(C_[i]*W - P) for i, W in enumerate([A, B, D])], axis=0)

        print(f"Iter {t+1}: Best = {S[0]:.4f}")
    return A, S[0]

best, score = gwo(obj, d=5, n=20, it=50, lb=-10, ub=10)
print("\nBest:", best, "\nScore:", score)
